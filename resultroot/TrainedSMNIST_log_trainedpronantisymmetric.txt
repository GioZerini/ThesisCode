dataroot: acds/benchmarks/, resultroot: resultroot/, resultsuffix: , n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 0.1, inp_scaling: 1.0, use_test: True, trials: 5, epochs: 40, lr: 0.01, topology: antisymmetric, train: ['0.95', '0.94', '0.94', '0.95', '0.95'] valid: ['0.0', '0.0', '0.0', '0.0', '0.0'] test: ['0.95', '0.95', '0.95', '0.95', '0.95']mean/std train: (np.float64(0.9474407196044922), np.float64(0.0034752473407332015)) mean/std valid: (np.float64(0.0), np.float64(0.0)) mean/std test: (np.float64(0.94923996925354), np.float64(0.0026642892013890324))
dataroot: acds/benchmarks/, resultroot: resultroot/, resultsuffix: , n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 1.0, inp_scaling: 1.0, use_test: True, trials: 2, epochs: 50, lr: 0.01, topology: antisymmetric, train: ['0.95', '0.96'] valid: ['0.0', '0.0'] test: ['0.96', '0.95']mean/std train: (np.float64(0.9551666378974915), np.float64(0.0002592802047729492)) mean/std valid: (np.float64(0.0), np.float64(0.0)) mean/std test: (np.float64(0.9547999501228333), np.float64(0.002499997615814209))
dataroot: acds/benchmarks/, resultroot: resultroot/, resultsuffix: , n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 1.0, inp_scaling: 1.0, use_test: True, trials: 2, epochs: 50, lr: 0.01, topology: antisymmetric, train: ['0.95', '0.96'] valid: ['0.0', '0.0'] test: ['0.96', '0.96']mean/std train: (np.float64(0.9577222168445587), np.float64(0.004555553197860718)) mean/std valid: (np.float64(0.0), np.float64(0.0)) mean/std test: (np.float64(0.9584499895572662), np.float64(0.000250011682510376))
