PROVATO DT=0.1 E DIFFUSIVE_GAMMA=1 CON ACCURACY 0.10 (LR=0.001 E 25 EPOCHE)

ANCHE DT=0.1 E DIFFUSIVE_GAMMA=0.1 CON ACCURACY 0.10 

PROVIAMO DT=0.01 E DIFFUSIVE_GAMMA=1 (BUON VALORE, SERVONO PIÃ¹ EPOCHE)

dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 1.0, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.001, topology: antisymmetric, train: ['0.86'] valid: ['0.86'] test: ['0.0']mean/std train: (np.float64(0.8550555109977722), np.float64(0.0)) mean/std valid: (np.float64(0.8550000190734863), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))


dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 0.1, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.001, topology: antisymmetric, train: ['0.85'] valid: ['0.85'] test: ['0.0']mean/std train: (np.float64(0.8450185060501099), np.float64(0.0)) mean/std valid: (np.float64(0.8451666831970215), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))

DT=0.01 E DIFFUSIVE_GAMMA=1 con epsilon gamma e i range a 0.5 converge molto lentamente

dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 1.0, gamma_range: 1.0, epsilon_range: 1.0, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 1.0, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.001, topology: antisymmetric, train: ['0.79'] valid: ['0.79'] test: ['0.0']mean/std train: (np.float64(0.7864629626274109), np.float64(0.0)) mean/std valid: (np.float64(0.7893333435058594), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))

dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 0.5, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.001, topology: antisymmetric, train: ['0.84'] valid: ['0.84'] test: ['0.0']mean/std train: (np.float64(0.8388333320617676), np.float64(0.0)) mean/std valid: (np.float64(0.8418333530426025), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))

dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 0.01, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.001, topology: antisymmetric, train: ['0.84'] valid: ['0.85'] test: ['0.0']mean/std train: (np.float64(0.8415369987487793), np.float64(0.0)) mean/std valid: (np.float64(0.8506666421890259), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))
dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 0.01, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.01, topology: antisymmetric, train: ['0.93'] valid: ['0.93'] test: ['0.0']mean/std train: (np.float64(0.9329258799552917), np.float64(0.0)) mean/std valid: (np.float64(0.9333333373069763), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))

dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 1.0, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.01, topology: antisymmetric, train: ['0.94'] valid: ['0.94'] test: ['0.0']mean/std train: (np.float64(0.9411851763725281), np.float64(0.0)) mean/std valid: (np.float64(0.9351666569709778), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))

dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 1.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 0.75, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.01, topology: antisymmetric, train: ['0.94'] valid: ['0.94'] test: ['0.0']mean/std train: (np.float64(0.9387221932411194), np.float64(0.0)) mean/std valid: (np.float64(0.9388332962989807), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))

NON VA BENE DR= 0.001 E NEANCHE GAMMA = 3 GAMMA RANGE = 3





dataroot: acds/benchmarks/, resultroot: resultGridSearch/, resultsuffix: trainmatrix, n_hid: 714, modelname: trainedpron, train_oscillators: True, train_recurrent: False, batch: 256, dt: 0.01, gamma: 2.0, epsilon: 0.5, gamma_range: 1.0, epsilon_range: 0.5, cpu: False, matrix_friction: False, input_fn: linear, diffusive_gamma: 0.1, inp_scaling: 1.0, use_test: False, trials: 1, epochs: 25, lr: 0.01, topology: antisymmetric, train: ['0.95'] valid: ['0.95'] test: ['0.0']mean/std train: (np.float64(0.9491481184959412), np.float64(0.0)) mean/std valid: (np.float64(0.9466666579246521), np.float64(0.0)) mean/std test: (np.float64(0.0), np.float64(0.0))
